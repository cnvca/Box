name: Test

on:
#  schedule:
#    - cron: 59 */8 * * *
  workflow_dispatch:
    inputs:
      rebuild:
        description: '忽略构建记录以重新构建'
        required: false
        type: boolean
      donotpublish:
        description: '构建后不提交发布新版'
        required: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - userName: takagen99
            repoName: Box
            branchName: main
            java_ver: 17
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check New Commit
        run: |
          upStream=https://github.com/${{ matrix.userName }}/${{ matrix.repoName }}
          echo "upStream=$upStream" >> $GITHUB_ENV
          commit=$(curl -sL $upStream/commits/${{ matrix.branchName }} |grep -o "/${{ matrix.userName }}/${{ matrix.repoName }}/commit/[a-z0-9]\+" |head -1 | cut -d\/ -f5)
          if ! grep -q "$commit" README.md || [ "${{ inputs.rebuild }}" == "true" ]; then
            echo "commit=$commit" >> $GITHUB_ENV
            echo "commitS=${commit:0:7}" >> $GITHUB_ENV
          fi
      - name: Checkout Source Code
        if: ${{ env.commit }}
        run: |
          git clone ${{ env.upStream }} Box
          cd Box
          git checkout ${{ env.commit }}
          echo "tag=$(git log --date=format:'%Y%m%d-%H%M' --pretty=format:%cd ${{ env.commitS }} -1)" >> $GITHUB_ENV
          
      - name: Extra Modify
        if: ${{ env.commit }}
        working-directory: Box
        run: |
          echo '修改VersionName'
          sed -i "/versionName/s#[0-9a-zA-Z_\.\'\"-]\+\$#\'HGTV-${{ env.tag }}\'#" ${{ github.workspace }}/app/build.gradle
          sed -i "/android:text=/s#=\"#=\"HGTV-${{ env.tag }}\\\\n\\\\n#" ${{ github.workspace }}/app/src/main/res/layout/dialog_about.xml
          echo 'crosswalk源，防挂'
     
      - uses: actions/setup-java@v4
        if: ${{ matrix.java_ver }}
        with:
          distribution: temurin
          java-version: ${{ matrix.java_ver }}
      - uses: gradle/actions/setup-gradle@v4
        if: ${{ env.commit }}
      - name: Build With Gradle
        if: ${{ env.commit }}

        run: |
          chmod +x gradlew
          ./gradlew assemblerelease --build-cache --parallel --daemon --warning-mode all
      - name: Prepare App
        if: ${{ env.commit }}
        run: |
          rm -rf apk/
          mkdir -p apk/
          for file in `find ~ -name "*release*.apk" -print`; do
            mv "$file" apk/HGTV_${{ env.tag }}.apk
          done
      - name: Release Note
        if: ${{ env.commit }}

        run: |
          lastCommit=$(grep "${{ matrix.userName }}\/${{ matrix.repoName }}" ${{ github.workspace }}/README.md |grep -o '[a-z0-9]\{40\}')
          export LESSCHARSET=utf-8
          echo -e "Credit: [${{ matrix.userName }}](${{ env.upStream }})\nCommit: ${{ env.commit }}\nChangelog:\n\`\`\`" > apk/${{ matrix.userName }}-Release.log
          if [ "${{ env.commit }}" == "${lastCommit}" ]; then
            git log --pretty=format:%B ${{ env.commitS }} -1 |sed -e "s# \{2,\}#\n#g" -e "/^Merge \(pull\|branch\|remote\)/d" -e '/^$/d' |cat -n |sort -k2,2 -k1,1n |uniq -f1 |sort -k1,1n |cut -f2- >> apk/${{ matrix.userName }}-Release.log
          else
            git log --pretty=format:%B ${{ env.commitS }}...${lastCommit:0:7} |sed -e "s# \{2,\}#\n#g" -e "/^Merge \(pull\|branch\|remote\)/d" -e '/^$/d' |cat -n |sort -k2,2 -k1,1n |uniq -f1 |sort -k1,1n |cut -f2- >> apk/${{ matrix.userName }}-Release.log
          fi
          echo -e '\n```' >> apk/${{ matrix.userName }}-Release.log
      - name: Upload App To Artifact
        uses: actions/upload-artifact@v4
        if: ${{ env.commit }}
        with:
          name: ${{ matrix.userName }}-${{ matrix.repoName }}
          path: |
            ${{ github.workspace }}/apk/*
      - name: Whether Or Not to Publish
        if: ${{ inputs.donotpublish && env.commit }}
        run: |
          echo "commit=" >> $GITHUB_ENV
      - name: Release and Upload Assets
        uses: ncipollo/release-action@v1
        if: ${{ env.commit }}
        with:
          name: ${{ env.tag }}
          tag: ${{ env.tag }}
          bodyFile: ${{ github.workspace }}/apk/${{ matrix.userName }}-Release.log
          allowUpdates: true
          removeArtifacts: true
          artifacts: |
            ${{ github.workspace }}/apk/*.apk
            
      - name: Download Telegram Bot API Binary
        if: ${{ env.commit }}
        uses: actions/download-artifact@v4
        with:
          name: telegram-bot-api-binary
          path: Box
      - name: Post To Telegram
        if: ${{ env.commit }}
        working-directory: Box
        env:
          CHAT_ID: -1001734684817
          TELEGRAM_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          if [ -n "${{ secrets.BOT_TOKEN }}" ]; then
            sed -i -e '1s/\[\(.*\)\].*/#\1/' -e 's#\([&"\/]\)#\\\1#g' apk/${{ matrix.userName }}-Release.log
            mv -f apk/${{ matrix.userName }}-Release.log caption.txt
            chmod +x telegram-bot-api-binary
            ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 --local 2>&1 > /dev/null &
            mv ../.github/scripts/upload.py ./
            python upload.py
          fi
      - name: Push to master
        if: ${{ env.commit }}
        run: |
          rm -rf Box
          sed -i '/url =/d' ./.git/config
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"        
          git remote set-url --add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git stash
          git pull --rebase
          sed -i "/${{ matrix.userName }}\/${{ matrix.repoName }}/s#Updated: [a-zA-Z0-9]*#Updated: ${{ env.commit }}#" README.md         
          git add --all 
          git commit -m "${{ env.commit }}"          
          git push -u -f origin main

  telegram-bot-api:
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone Telegram Bot API
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          git status telegram-bot-api >> telegram-bot-api-status

      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v4
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}

      - name: Compile Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary

      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary

  clean:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Delete older workflow runs and artifacts
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 14
          keep_minimum_runs: 10
